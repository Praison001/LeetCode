
Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
Note that the answer must be a substring, "pwke" is a subsequence and not a substring

Reference:https://www.geeksforgeeks.org/length-of-the-longest-substring-without-repeating-characters/
https://www.youtube.com/watch?v=AoWiiN_bwv4
https://www.youtube.com/watch?v=3IETreEybaA

Sliding window approach (to see which window of string is the largest without repeating characters)

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        seen={}
        
        start=0
        max_length=0
        
        for pos in range(len(s)):
            if s[pos] in seen:
                start= max(start, seen[s[pos]]+1)
                
            seen[s[pos]]=pos
            max_length= max(max_length,pos-start+1)
        return max_length