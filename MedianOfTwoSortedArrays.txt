There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5


There is also inbuilt methods like statistics and median for solving this problem

Reference for merging: https://www.geeksforgeeks.org/merge-two-sorted-arrays/
Merging the two arrays and simultaneously sorting it (O(n1+n2))
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        size1=len(nums1)
        size2= len(nums2)
        arr3=[None]* (size1+ size2)
        i= 0
        j= 0
        k= 0
        
        while i<size1 and j<size2:
            if nums1[i]< nums2[j]:
                arr3[k]= nums1[i]
                i+=1
                k+=1
            else:
                arr3[k]=nums2[j]
                j+=1
                k+=1
        while i<size1:
            arr3[k]= nums1[i]
            i+=1
            k+=1
        while j<size2:
            arr3[k]=nums2[j]
            j+=1
            k+=1
        length= len(arr3)
        if (length % 2 == 0):
            median = (arr3[(length)//2] + arr3[(length)//2-1]) / 2
            return median
        else:
            median = arr3[(length-1)//2]
            return median
        
Efficient menthod with lesser run time   
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        size1=len(nums1)
        size2= len(nums2)
        nums1.extend(nums2)
        srt= sorted(nums1)
        if len(srt)%2==0:
            n=  len(srt)//2
            return (srt[n-1]+ srt[n])/2
        else:
            n= (len(srt)//2)+1
            return srt[n-1]
    