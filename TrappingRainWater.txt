Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. 


Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6

Time, Space Complexity: O(n), O(1).

Using the two pointer approach.

If you have trouble understanding the algorithm, visit the solution below and keep your code
on the side and walk through the slides step by step to know how it works.
https://leetcode.com/problems/trapping-rain-water/solution/

Watch this video to get a brief idea on how it works
https://www.youtube.com/watch?v=ZanjlzDaFoI

class Solution:
    def trap(self, height: List[int]) -> int:
        volume= 0
        if not height or len(height)<3:
            return 0
        
        left, right= 0, len(height)-1
        l_max, r_max= height[left], height[right]
        
        while left<right:
            l_max, r_max= max(l_max, height[left]), max(r_max, height[right])
            if l_max<=r_max:
                volume+= l_max- height[left]
                left+=1
            else:
                volume+= r_max- height[right]
                right-=1
        return volume
        