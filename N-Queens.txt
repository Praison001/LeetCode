The n-queens puzzle is the problem of placing n queens on an nÃ—n chessboard such that no two queens attack each other.



Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

Example:

Input: 4
Output: [
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.

Video Reference: https://www.youtube.com/watch?v=wGbuCyNpxIg
https://www.youtube.com/watch?v=LTJupuoL-hY

Similar to backtrackting. Using dfs approach. 
class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        res= []
        if not n:
            return []
        def dfs(queens, xy_diff, xy_sum):  
            p= len(queens)
            if p==n:
                res.append(queens)
                return
            for q in range(n):
                if q not in queens and p-q not in xy_diff and p+q not in xy_sum:
                    dfs(queens+[q], xy_diff+[p-q], xy_sum+[p+q])
                    
        dfs([],[],[])
        return [["."*i + "Q" + "."*(n-i-1)for i in sol]for sol in res]