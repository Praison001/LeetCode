Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

Example:

Input: [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2.
    Jump 1 step from index 0 to 1, then 3 steps to the last index.
Note:

You can assume that you can always reach the last index.

Watch this video to get an understanding on what the problem is about, and how th algorithm works.

Video Reference: https://www.youtube.com/watch?v=QweDKxNeHbA

class Solution:
    def jump(self, nums: List[int]) -> int:
        res= 0  #total number of jumps
        edge= 0  #the jumping indeces
        maxEdge= 0
        for i in range(len(nums)):
            if i>edge:   
                res+=1
                edge= maxEdge
            maxEdge= max(maxEdge, i+nums[i])
        return res
                
        