Given a string containing digits from 2-9 inclusive, 
return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. 
Note that 1 does not map to any letters.

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order,
your answer could be in any order you want.

Think of this problem like traversing a tree where we keep track of every path in the variable, combination.
Once we hit a leaf node, we append the path traveled to the variable, res.

Better Solution
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        res=[]
        mapping = {"2":["a", "b", "c"], 
                   "3":["d", "e", "f"], 
                   "4":["g", "h", "i"], 
                   "5":["j", "k", "l"], 
                   "6":["m", "n", "o"], 
                   "7":["p", "q", "r", "s"], 
                   "8":["t", "u", "v"], 
                   "9":["w", "x", "y", "z"],}
        def recurse(combination,digits1):
            if len(digits1)==0:
                res.append(combination)  
            else:
                for letter in mapping[digits1[0]]:
                    recurse((combination+letter),digits1[1:])
        if digits:
            recurse("",digits)
        return res
        
Alternative solution
Video Reference: https://www.youtube.com/watch?v=cIOxZ7bNh7w     
class Solution:
    def __init__(self):
        self.d= {
            "0": "_",
            "1": None,
            "2": "abc",
            "3": "def",
            "4": "ghi",
            "5": "jkl",
            "6": "mno",
            "7": "pqrs",
            "8": "tuv",
            "9": "wxyz"
        }
    def letterCombinations(self, digits):
        combinations= set()
        
        def recurse(restOfTheWord, pathSoFar):
            
            if not restOfTheWord:
                combinations.add(pathSoFar)
                return
            first, rest= restOfTheWord[0], restOfTheWord[1:]
            letters= self.d[first]
            for letter in letters:
                recurse(rest, pathSoFar+letter)
        recurse(digits,"")
        return combinations

r= Solution()
res= r.letterCombinations('24')
print(res)
        
        