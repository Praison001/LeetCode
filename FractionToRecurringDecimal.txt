Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

Example 1:

Input: numerator = 1, denominator = 2
Output: "0.5"
Example 2:

Input: numerator = 2, denominator = 1
Output: "2"
Example 3:

Input: numerator = 2, denominator = 3
Output: "0.(6)"

class Solution:
    def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if not denominator:
            return
        if not numerator:
            return "0"

        res= []
        if (numerator<0) ^ (denominator<0):  # ^,bitwise XOR operator...if only one is true, the block is executed
            res.append("-")
            
        num, den= abs(numerator), abs(denominator)
        res.append(str(num//den))     #storing only the absolute part in the list

        #calculating the decimal/fraction part
        rmd= num%den
        if not rmd:
            return "".join(res)

        #if there is a fraction part
        res.append(".")
        dic= {}
        while rmd:
            if rmd in dic:    #inserting the paranthesis for the decimal part
                res.insert(dic[rmd],"(")
                res.append(")")
                break
                
            dic[rmd]= len(res)
            div,rmd= divmod(rmd*10,den)
            res.append(str(div))
            
        return "".join(res)
        
        
        
        