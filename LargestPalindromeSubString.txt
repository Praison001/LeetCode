Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"

Video Reference: https://www.youtube.com/watch?v=xYBKMV92YrM

class Solution:
    def longestPalindrome(self, s: str) -> str:
        largestPalindrome=''
        for i in range(len(s)):
            palindromeOdd= self.palindromeIndex(s,i,i)
            palindromeEven= self.palindromeIndex(s,i,i+1)
            largestPalindrome1= palindromeOdd if len(palindromeOdd)>len(palindromeEven) else palindromeEven
            largestPalindrome= largestPalindrome if len(largestPalindrome)>=len(largestPalindrome1) else largestPalindrome1
        return largestPalindrome
   
    def palindromeIndex(self, s, left, right):
        leftIndex= 0
        rightIndex= 0
        while left>=0 and right<len(s):
            if s[left]==s[right]:
                leftIndex= left
                rightIndex= right
            else:
                break
            left-=1
            right+=1
        return s[leftIndex:rightIndex+1]
           
            
            
            
            
            
        