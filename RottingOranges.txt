In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 

Example 1:
Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:
Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:
Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Note:
1 <= grid.length <= 10
1 <= grid[0].length <= 10
grid[i][j] is only 0, 1, or 2.

Similar to number of islands problem.
Watch the video reference in number of islands first to understand this problem better

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        row, col = len(grid), len(grid[0])
        rotten = [(i, j) for i in range(row) for j in range(col) if grid[i][j] == 2]
        
        timer = 0
        while rotten:
            rotten = self.add_neighbors(grid, rotten, row, col)
            if len(rotten) == 0: break
            timer += 1
        
        for i in range(row):
            for j in range(col):
                if grid[i][j] == 1:
                    return -1
        
        return timer 
        
    def add_neighbors(self, grid, rotten, row, col):
        neighbors = []
        for i, j in rotten:
            if i > 0 and grid[i - 1][j] == 1:
                neighbors.append((i - 1, j))
                grid[i-1][j] = 2
            if j > 0 and grid[i][j - 1] == 1:
                neighbors.append((i, j - 1))
                grid[i][j-1] = 2
            if i < row - 1 and grid[i + 1][j] == 1:
                neighbors.append((i + 1, j))
                grid[i + 1][j] = 2
            if j < col - 1 and grid[i][j + 1] == 1:
                neighbors.append((i, j + 1))
                grid[i][j+1] = 2
        return neighbors