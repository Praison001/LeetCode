Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.


Watch the video related to merging two sorted lists to understand this solution better.

This solution is slicing the rewiring the elements
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        stack= []
        dummy= ListNode(0)
        curr= dummy
        while head:
            temp= head #hold the temporary value of head
            for _ in range(k):
                if head is None:
                    curr.next=temp
                    return dummy.next
                stack.append(head)
                head= head.next              #slicing the element according to K groups and adding them to stack
            while stack:
                node= stack.pop()    #popping the last element and rewiring it
                node.next= None
                if curr:
                    curr.next= node
                    curr= curr.next
                else:
                    dummy.next= node
                    curr= node
        return dummy.next
                    
                    