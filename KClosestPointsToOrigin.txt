We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)
 

Note:

1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000

We can solve this using minheap

Explanation of minheap and why we negate distance in the code: 

heapq is implemented as min heap.

However, what we actually want is a max heap where when we 'pop' an element from the max heap, we get the largest element currently in the heap.

Let's take example of points = [[1,3],[-2,2]], K = 1.
If we were to push both [1,3] and [2,2] to heap by their Euclidean distance, then our heap would have [(10, 1, 3), (8, -2, 2)].
When we "pop" an element, we want to pop (10, 1, 3), which is how max heap works.

Since Python's heapq is implemeneted as min heap, we would actually get (8,-2,2) which is not what we want.
To use Python's heapq as Max heap, we just reverse the sign of Euclidean distance.

Runtime:
Inserting an item to a heap of size k take O(logK) time.
And we do this for each item points.
So runtime is O(N * logK) where N is the length of points.

Space: O(K) for our heap

class Solution:
    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:
        heap= []
        for point in points:
            dist= point[0] * point[0] + point[1] * point[1]
            heapq.heappush(heap, (-dist, point))
            if len(heap)>K:
                heapq.heappop(heap)
        return [list[1] for list in heap]

                
        