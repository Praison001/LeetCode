Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

 

Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently?
 How would you optimize the kthSmallest routine?

 Constraints:
The number of elements of the BST is between 1 to 10^4.
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Video Reference: https://www.youtube.com/watch?v=egRZn9rZVqk

Using inorder Traversal.
class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        def in_order(root):
            if root is None:
                return []
            inorder_left= in_order(root.left)
            root_val= [root.val]
            inorder_right= in_order(root.right)
            
            return inorder_left+ root_val+ inorder_right
        return in_order(root)[k-1]
       
More Optimal Solution.(Somewhat like preorder traversal)
class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        self.k = k
        self.res = None
        self.found = False
        self.helper(root)
        return self.res

    def helper(self, node):
        #exit as soon as possible
        if self.found:
            return
        if not node:
            return
        self.helper(node.left)
        self.k -= 1
        if self.k == 0:
            self.res = node.val
            self.found = True
            return
        self.helper(node.right)