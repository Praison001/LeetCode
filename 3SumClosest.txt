Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

Example:

Given array nums = [-1, 2, 1, -4], and target = 1.

The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

Similar to 3sum 
Video Reference: https://www.youtube.com/watch?v=bDjcWbHQvJE&t=2s

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        res=0
        diff=2**30   #just specifying what the max difference could be, no rocket science stuff
        for i in range(len(nums)-2):
            if i>0 and nums[i]==nums[i-1]:
                continue
            l=i+1
            r=len(nums)-1
            while l<r:
                total= nums[i]+nums[l]+nums[r]
                if total==target:
                    return total
                elif total<target:
                    l+=1
                else:
                    r-=1
                if abs(target-total)<diff:
                    diff= abs(target-total)
                    res= total
        return res
        
            
        
        