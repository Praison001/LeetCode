Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

Both approaches have O(n) time complexity but the first one using hash map is faster.

class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        dictP= Counter(p)
        dictS= Counter(s[:len(p)])
        res= []
        i= 0
        j= len(p)
        
        while j<=len(s):
            if dictP==dictS:
                res.append(i)
            dictS[s[i]]-=1
            if dictS[s[i]]<=0:
                dictS.pop(s[i])
            
            if j<len(s):
                dictS[s[j]]+=1
            
            i+=1
            j+=1
        return res

def findAnagrams2(self, s, p):
        cnt_p = Counter(p); n = len(s); m = len(p); res = []
        for i in range(n-m+1): 
            if cnt_s == Counter(s[i:i+m]): res.append(i)
        return res