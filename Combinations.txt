Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Example:

Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

Using Library, it's faster
class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        return list(combinations(range(1,n+1),k))

Using recursion.
class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        res = []
        self.backtrack(n, k, res, [], 1)
        return res
    
    def backtrack(self, n, k, res, path, index):
        if len(path) == k:
            res.append(path)
            return
        for i in range(index, n+1):
            self.backtrack(n, k, res, path+[i], i+1)
        