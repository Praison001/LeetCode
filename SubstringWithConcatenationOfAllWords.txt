You are given a string, s, and a list of words, words, that are all of the same length. 
Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.

 
Example 1:

Input:
  s = "barfoothefoobarman",
  words = ["foo","bar"]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are "barfoo" and "foobar" respectively.
The output order does not matter, returning [9,0] is fine too.
Example 2:

Input:
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
Output: []

Sliding Window Approach

class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        if not len(words):
            return []
        
        singleWord= len(words[0])
        lengthOfAllWords= singleWord * len(words)
        if len(s)<lengthOfAllWords:
            return []
        res=[]
        wordDict= {}
        #storing the words in a dictionary
        for x in words:
            if x in wordDict:
                wordDict[x]+=1
            else:
                wordDict[x]=1
        #initializing the starting position of window in the string with index values
        first= 0
        second= lengthOfAllWords-1
        
        while second<len(s):
            starter= first
            wrd= dict(wordDict)
            while starter<=second:
                curr= s[starter:starter+singleWord]
                if curr in wrd and wrd[curr]>=1:
                    starter+=singleWord       #moving the starting position of the window
                    wrd[curr]-=1
                else:
                    break
            if starter>second:
                res.append(first)
            first+=1     #moving the window across the string with the help of indeces
            second+=1 
        return res
                    
        
        