class Solution:
Sometimes people repeat letters to represent extra feeling, such as "hello" -> "heeellooo", "hi" -> "hiiii".  
In these strings like "heeellooo", we have groups of adjacent letters that are all the same:  "h", "eee", "ll", "ooo".

For some given string S, a query word is stretchy if it can be made to be equal to S by any number of applications of the following extension operation: 
choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is 3 or more.

For example, starting with "hello", we could do an extension on the group "o" to get "hellooo", but we cannot get "helloo" since the group "oo" has size less than 3. 
 Also, we could do another extension like "ll" -> "lllll" to get "helllllooo". 
 If S = "helllllooo", then the query word "hello" would be stretchy because of these two extension operations: query = "hello" -> "hellooo" -> "helllllooo" = S.

Given a list of query words, return the number of words that are stretchy. 

 

Example:
Input: 
S = "heeellooo"
words = ["hello", "hi", "helo"]
Output: 1
Explanation: 
We can extend "e" and "o" in the word "hello" to get "heeellooo".
We can't extend "helo" to get "heeellooo" because the group "ll" is not size 3 or more.
 

Notes:

0 <= len(S) <= 100.
0 <= len(words) <= 100.
0 <= len(words[i]) <= 100.
S and all words in words consist only of lowercase letters




    def expressiveWords(self, S: str, words: List[str]) -> int:

        # compress a word into a letter sequence and corresponding counts
        def compress(word):
            letters = []
            counts = []
            for l in word:
                if not letters or l != letters[-1]:
                    letters.append(l)
                    counts.append(1)
                else:
                    counts[-1] += 1
                    
            return letters, counts
        
        # check if a word is stretchy by comparing to compressed S
        def is_stretchy(w):
            
            # S_letters, S_counts are the output of compress(S)
            nonlocal S_letters, S_counts
            
            w_letters, w_counts = compress(w)
            
            if w_letters != S_letters:
                return False
            
            for i in range(len(S_counts)):
                if S_counts[i] < 3 and S_counts[i] != w_counts[i]:
                    return False
                if S_counts[i] >= 3 and S_counts[i] < w_counts[i]:
                    return False
                    
            return True

        # main body
        S_letters, S_counts = compress(S)
        res = 0
        for w in words:
            if is_stretchy(w):
                res += 1
        
        return res