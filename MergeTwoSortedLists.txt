Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

Video Reference: https://www.youtube.com/watch?v=GfRQvf7MB3k (watch the video to get an idea on how the algorithm works)


This solution is just like rewiring two electrical circuits(l1 and l2) in a sorted order,
one by one using curr as the connecting element.

Dummy always point to the tail of the linked list we are going to build.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

Time complexity: O(m+n)
Space complexity: O(1)
Merge Sort Approach
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy= ListNode()
        curr= dummy
        while l1 and l2:
            if l1.val<=l2.val:
                curr.next= l1
                l1= l1.next
            else:
                curr.next= l2
                l2= l2.next
            curr= curr.next
        if l1:
            curr.next= l1
        if l2:
            curr.next= l2
        return dummy.next
        
        