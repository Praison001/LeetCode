Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example:

Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
Note:

You must do this in-place without making a copy of the array.
Minimize the total number of operations.

Time Complexity: O(n^2) because of del, no extra space though.
class Solution(object):
    def moveZeroes(self, nums):
	if len(nums)==1 or len(nums)==0:
            return 

        l= 0
        r= len(nums)

        while l < r:
            if nums[l] == 0:
                del nums[l]
                nums.append(0)
                end -= 1
            else:
                l += 1

-----------------------------------------------
Slow
def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
	if len(nums)==1 or len(nums)==0:
            return 
        for j in range(nums.count(0)):
            nums.remove(0)
            nums.append(0)
---------------------------------------------
One liner. Fast but takes extra space.

if len(nums)==1 or len(nums)==0:
            return 
nums[:] = [x for x in nums if x !=0] + [0] * nums.count(0)