Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6



Video Reference: 
https://www.youtube.com/watch?v=GfRQvf7MB3k (watch the video to get an idea on how the algorithm works)
https://www.youtube.com/watch?v=ptYUCjfNhJY
https://www.youtube.com/watch?v=5yNYsD99-pM

This is just like solving merging two sorted lists

Easy problem if you know how merge sort works.
We can also use min heap to solve this problem.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        if not lists:
            return
        if len(lists)==1:
            return lists[0]
        mid= len(lists)//2
        l1= self.mergeKLists(lists[:mid])
        l2= self.mergeKLists(lists[mid:])
        return self.merge(l1,l2)
    def merge(self,l1,l2):
        dummy= ListNode(0)
        curr= dummy
        while l1 and l2:
            if l1.val<=l2.val:
                curr.next= l1
                l1= l1.next
            else:
                curr.next=l2
                l2= l2.next
            curr= curr.next
        if l1:
            curr.next= l1
        if l2:
            curr.next= l2
        return dummy.next
        
        
        